% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_metrics_overtime.R
\name{plot_metrics_overtime}
\alias{plot_metrics_overtime}
\title{Plot One Performance Metric over Time or One vs. Another over Time}
\usage{
plot_metrics_overtime(
  metrics = NULL,
  formula = cagr ~ .,
  type = "hop.year",
  minimum.n = 3,
  tickers = NULL,
  ...,
  gains = NULL,
  prices = NULL,
  benchmark = "SPY",
  y.benchmark = benchmark,
  x.benchmark = benchmark,
  plotly = FALSE,
  title = NULL,
  base_size = 16,
  return = "plot"
)
}
\arguments{
\item{metrics}{"Long" data frame with Fund column, Date column, and column
for each metric you want to plot. Typically the result of a prior call to
\code{\link{calc_metrics_overtime}}.}

\item{formula}{Formula specifying what to plot, e.g. \code{cagr ~ mdd} for
CAGR vs. MDD or \code{cagr ~ .} for CAGR over time. See \code{?calc_metrics}
for list of performance metrics to choose from.}

\item{type}{Character string or vector specifying type of calculation.
Choices are (1) \code{"roll.n"} where n is a positive integer; (2)
\code{"hop.n"} where n is a positive integer; (3) \code{"hop.month"}; (4)
\code{"hop.year"}; and (5) vector of break-point dates, e.g.
\code{c("2019-01-01", "2019-06-01")} for 3 periods. The "roll" and "hop"
options correspond to rolling and disjoint windows, respectively.}

\item{minimum.n}{Integer value specifying the minimum number of observations
per period, e.g. if you want to exclude short partial months at the beginning
or end of the analysis period.}

\item{tickers}{Character vector of ticker symbols that Yahoo! Finance
recognizes, if you want to download data on the fly.}

\item{...}{Arguments to pass along with \code{tickers} to
\code{\link{load_gains}}.}

\item{gains}{Data frame with a date variable named Date and one column of
gains for each investment.}

\item{prices}{Data frame with a date variable named Date and one column of
prices for each investment.}

\item{benchmark, y.benchmark, x.benchmark}{Character string specifying which
fund to use as benchmark for metrics (if you request \code{alpha},
\code{alpha.annualized}, \code{beta}, or \code{r.squared}).}

\item{plotly}{Logical value for whether to convert the
\code{\link[ggplot2]{ggplot}} to a \code{\link[plotly]{plotly}} object
internally.}

\item{title}{Character string. Only really useful if you're going to set
\code{plotly = TRUE}, otherwise you can change the title, axes, etc.
afterwards.}

\item{base_size}{Numeric value.}

\item{return}{Character string specifying what to return. Choices are
\code{"plot"}, \code{"data"}, and \code{"both"}.}
}
\value{
Depending on \code{return}, a \code{\link[ggplot2]{ggplot}}, a data frame
with the source data, or a list containing both.
}
\description{
Useful for assessing how one or two performance metrics vary over time, for
one or several funds. Supports fixed-width rolling windows, fixed-width
disjoint windows, and disjoint windows on per-month or per-year basis.
}
\examples{
\dontrun{
# Plot net growth each year for BRK-B and SPY
plot_metrics_overtime(formula = growth ~ ., type = "hop.year", tickers = c("BRK-B", "SPY"))

# Create previous plot in step-by-step process with pipes
c("BRK-B", "SPY") \%>\%
  load_gains() \%>\%
  calc_metrics_overtime("growth", type = "hop.year") \%>\%
  plot_metrics_overtime(growth ~ .)

# Plot betas from 100-day disjoint intervals for a 2x daily (SSO) and 3x
# daily (UPRO) leveraged ETF
plot_metrics_overtime(formula = beta ~ ., type = "hop.100", tickers = c("SSO", "UPRO"))

# Create previous plot in step-by-step process with pipes
c("SPY", "SSO", "UPRO") \%>\%
  load_gains() \%>\%
  calc_metrics_overtime(metrics = "beta", type = "hop.100") \%>\%
  plot_metrics_overtime(formula = beta ~ .)

# Plot 50-day rolling alpha vs. beta for SSO and UPRO during 2018
plot_metrics_overtime(
  formula = alpha ~ beta,
  type = "roll.50",
  tickers = c("SSO", "UPRO"),
  from = "2018-01-01", to = "2018-12-31"
)

# Create previous plot in step-by-step process with pipes
c("SPY", "SSO", "UPRO") \%>\%
  load_gains(from = "2018-01-01", to = "2018-12-31") \%>\%
  calc_metrics_overtime(metrics = c("alpha", "beta"), type = "roll.50") \%>\%
  plot_metrics_overtime(alpha ~ beta)

}



}
